<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">

	<!-- 扫描注解Bean -->
	<context:component-scan base-package="com.udf">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.RestController" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!--数据库连接配置 使用c3p0管理数据连接池 -->
	<context:property-placeholder location="classpath:config/jdbc.properties"/>
	<!--等效配置，用上面的简便-->
	<!--<bean id="propertyConfigurer"-->
		<!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="location" value="classpath:config/jdbc.properties" />-->
	<!--</bean>-->



	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="true" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 
			0 -->
		<property name="checkoutTimeout" value="600" />
		<!--初始化时获取连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="2" />
		<property name="minPoolSize" value="1" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!--最大空闲时间,?秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="0" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="2" />
		<property name="maxIdleTimeExcessConnections" value="43200" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="10" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="1000" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads" value="5" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="0" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="false" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>


	<!-- 数据源 SQL值监视 -->
	<bean id="p6spy-dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
			<bean
					class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<property name="driverClassName"
						  value="${jdbc.driverClassName}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- jpa Entity Factory 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.udf.**.entity" />
		<property name="persistenceUnitName" value="undi.jpa.hibernate" />
		<property name="persistenceProvider">
			<bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="MYSQL" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="jpaPropertyMap">
			<map>
				<!-- 使用自定义的validator进行jsr303验证 -->
				<!-- <entry key="javax.persistence.validation.factory" value-ref="validator"/> -->
				<!-- jsr303验证模式 因为其要么验证 要么不验证 不能按照规则走 所以此处禁用 -->
				<!-- #http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html -->
				<entry key="javax.persistence.validation.mode" value="NONE" />

				<!-- 开启JPA的缓存模式 -->
				<!-- <entry key="javax.persistence.sharedCache.mode" value="ENABLE_SELECTIVE"/> -->

				<!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
				<entry key="hibernate.archive.autodetection" value="class" />
				<!-- 不检查@NamedQuery -->
				<!-- <entry key="hibernate.query.startup_check" value="false"/> -->
				<!-- <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}"/> -->
				<entry key="hibernate.default_batch_fetch_size" value="10" />
				<entry key="hibernate.max_fetch_depth" value="3" />
				<entry key="hibernate.generate_statistics" value="false" />
				<!-- 字节码反射优化? -->
				<entry key="hibernate.bytecode.use_reflection_optimizer"
					value="true" />
				<entry key="hibernate.cache.use_second_level_cache" value="false" />
				<entry key="hibernate.cache.use_query_cache" value="false" />
				<entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory" />
				<!-- <entry key="net.sf.ehcache.configurationResourceName" value="ehcache-hibernate.xml"/> -->
				<!-- 如果是类路径可以用上面的，如果在web中，最好用下面的 -->
				<!-- <entry key="hibernate.cache.provider_configuration_file_resource_path" -->
				<!-- value="/WEB-INF/config/ehcache-hibernate.xml" /> -->
				<!-- 结构化的显示二级缓存中的数据。监控缓存的时候好看。声场环境中要用false -->
				<entry key="hibernate.cache.use_structured_entries" value="false" />

			</map>
		</property>
	</bean>

	<jpa:repositories base-package="com.udf.*.dao"
		repository-impl-postfix="Impl"
		factory-class="com.udf.core.orm.nestedSet.support.UndiBaseRepositoryFactoryBean"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager"/>
	<!--repository-base-class="com.udf.core.orm.nestedSet.dao.NestedSetRepositoryImpl"-->

	<!--注解事务支持-->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!--事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 国际化文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="-1" />
		<property name="basenames">
			<list>
				<value>/WEB-INF/languages/messages</value>
			</list>
		</property>
	</bean>

	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"/>

	<bean id="validator" lazy-init="false"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<bean id="Jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>com.udf.core.menu.bean.Menu</value>
				<value>com.udf.core.menu.bean.MenuItem</value>
			</list>
		</property>
	</bean>

	<bean class="com.udf.core.menu.service.MenuService">
		<property name="location" value="classpath:config/menu.xml"/>
	</bean>


	<!--开启springAOP,默认用JDK动态代理，面向接口 -->
	<!--<aop:aspectj-autoproxy expose-proxy="true" />-->

	<!--	内容协商：
	参考：http://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc
		 http://spring.io/blog/2013/06/03/content-negotiation-using-views-->
	<bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 是否开启扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true"/>
		<!-- 是否开启 参数==>mimeType，即/userinfo/123?format=json-->
		<property name= "favorParameter" value= "false" />
		<!-- 参数的名称 -->
		<property name= "parameterName" value= "format"/>
		<!-- 是否忽略Accept Header
		(一般忽略，因为各种设备自动给出的AcceptHeader不靠谱。如果单纯是浏览器环境，REST服务，可以Ajax自己设置Accept还行) -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 默认的contentType。(不明确给出时用)-->
		<property name="defaultContentType" value="text/html" />
		<!-- 是否开启 java自带的contentType映射自动转换。(如：自动帮你将json->application/json) -->
		<property name="useJaf" value="false"/>

		<property name="mediaTypes">
			<!--favorPathExtension, favorParameter是true时起作用.禁用JAF后，手动转换-->
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
	</bean>

	<!--为辅助类set所需的entityManagerFactory-->
	<!--文档说这种情况不需要返回值用methodInvokingBean更合适，可是这里好像不行-->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
				  value="com.udf.core.orm.nestedSet.support.NestedSetUtil.setEntityManagerFactory"/>
		<property name="arguments" ref="entityManagerFactory"/>
	</bean>
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
				  value="com.udf.common.orm.JPATreeListener.wiredEntityManagerFactory"/>
		<property name="arguments" ref="entityManagerFactory"/>
	</bean>

	<import resource="springCache.xml"/>
</beans>